{% macro m_color(c) %}
color {{ c }}
{% endmacro -%}

{% macro m_includes() %}
{% if includes is defined %}
{%   for I in includes %}
#include "{{ I }}.inc"
{%   endfor %}
{% endif %}
{% endmacro -%}

{% macro m_camera() %}
{% if camera is defined %}
camera {
{%   if camera.sky is defined %}
{%     if camera.sky.vector is defined %}
  sky {{ camera.sky.vector }}
{%     endif %}
{%   endif %}
{%   if camera.direction is defined %}
{%     if camera.direction.vector is defined %}
  direction {{ camera.direction.vector }}
{%     endif %}
{%   endif %}
{%   if camera.right is defined %}
{%     if camera.right.vector is defined %}
  right {{ camera.right.vector }}
{%     endif %}
{%   endif %}
{%   if camera.location is defined %}
{%     if camera.location.vector is defined %}
  location {{ camera.location.vector }}
{%     endif %}
{%   endif %}
{%   if camera.look_at is defined %}
{%     if camera.look_at.vector is defined %}
  look_at {{ camera.look_at.vector }}
{%     endif %}
{%   endif %}
{%   if camera.angle is defined %}
  angle {{ camera.angle }}
{%   endif %}
}
{% endif %}
{% endmacro -%}

{% macro m_globals() %}
{% if globals is defined %}
global_settings {
{%   for G in globals | dict2items %}
  {{ G.key }} {{ G.value }}
{%   endfor %}
}
{% endif %}
{% endmacro -%}

{% macro m_light() %}
{% if lights is defined %}
{%   for l in lights %}
light_source {
{%     if l.location.vector is defined %}
  {{ l.location.vector }}
{%     endif %}
  {{ m_color(l.color) -}}
}
{%   endfor %}
{% endif %}
{% endmacro -%}

{% macro m_background() %}
{%   if background is defined %}
background {
  {{ m_color(background.color) -}}
}
{%   endif %}
{% endmacro -%}

{% macro m_stuff(thing) %}
{%   if thing.scale is defined %}
  scale {{ thing.scale }}
{%   endif %}
{%   if thing.rotate is defined %}
{%     if thing.rotate is string %}
  rotate {{ thing.rotate }}
{%     else %}
{%       for R in thing.rotate %}
  rotate {{ R }}
{%       endfor %}
{%     endif %}
{%   endif %}
{%   if thing.translate is defined %}
  translate {{ thing.translate }}
{%   endif %}
{%   if thing.texture is defined %}
  texture {
{%     if thing.texture is mapping %}
{%       if thing.texture.pigment is defined %}
    pigment { {{ thing.texture.pigment }} }
{%       endif %}
{%     else %}
    {{ thing.texture }}
{%     endif %}
  }
{%   endif %}
{%   if thing.pigment is defined %}
  pigment { {{ thing.pigment }} }
{%   endif %}
{%   if thing.interior is defined %}
  interior { {{ thing.interior }} }
{%   endif %}
{% endmacro -%}

{% macro m_thing(thing) %}
{{ thing.type }} {
{%   if thing.type == 'texture' %}
{%     if thing.texture is not mapping %}
  {{ thing.texture }}
{%     endif %}
{%     if thing.finish is defined %}
  finish {
{%       if thing.finish.ambient is defined %}
    ambient {{ thing.finish.ambient }}
{%       endif %}
{%       if thing.finish.diffuse is defined %}
    diffuse {{ thing.finish.diffuse }}
{%       endif %}
{%       if thing.finish.reflection is defined %}
    reflection {{ thing.finish.reflection }}
{%       endif %}
{%       if thing.finish.specular is defined %}
    specular {{ thing.finish.specular }}
{%       endif %}
{%       if thing.finish.roughness is defined %}
    roughness {{ thing.finish.roughness }}
{%       endif %}
{%       if thing.finish.phong is defined %}
    phong {{ thing.finish.phong }}
{%       endif %}
  }
{%     endif %}
{%     if thing.pigment is defined %}
  pigment {
{%       if thing.pigment.color is defined %}
   color {{ thing.pigment.color }}
  }
{%       endif %}
{%     endif %}
{%   endif %}
{%   if thing.type == 'plane' %}
  {{ thing.normal }}, {{ thing.distance }}
{{ m_stuff(thing) -}}
{%   endif %}
{%   if thing.type == 'box' %}
  {{ thing.corner_1 }}, {{ thing.corner_2 }}
{{ m_stuff(thing) -}}
{%   endif %}
{%   if thing.type == 'sphere' %}
  {{ thing.location }}, {{ thing.radius }}
{{ m_stuff(thing) -}}
{%   endif %}
{%   if thing.type == 'cone' %}
  {{ thing.end_1 }}, {{ thing.radius_1 }},
  {{ thing.end_2 }}, {{ thing.radius_2 }}
  {% if (thing.open | default(False)) %}open{% endif %}
{{ m_stuff(thing) -}}
{%   endif %}
{%   if thing.type == 'cylinder' %}
  {{ thing.end_1 }}, {{ thing.end_2 }}, {{ thing.radius }}
  {% if (thing.open | default(False)) %}open{% endif %}
{{ m_stuff(thing) -}}
{%   endif %}
{%   if thing.type == 'difference' %}
{%     for O in thing.content %}
{{ m_thing(O) }}
{%     endfor %}
{{ m_stuff(thing) -}}
{%   endif %}
{%   if thing.type == 'union' %}
{%     for O in thing.content %}
{{ m_thing(O) }}
{%     endfor %}
{{ m_stuff(thing) -}}
{%   endif %}
{%   if thing.type == 'intersection' %}
{%     for O in thing.content %}
{{ m_thing(O) }}
{%     endfor %}
{{ m_stuff(thing) -}}
{%   endif %}
{%   if thing.type == 'object' %}
{%     if thing.object is defined %}
  {{ thing.object }}
{%     endif %}
{%     if thing.union is defined %}
  union {
{%       for O in thing.union %}
{{ m_thing(O) }}
{%       endfor %}
  }
{%     endif %}
{%     if thing.intersection is defined %}
  intersection {
{%       for O in thing.intersection %}
{{ m_thing(O) }}
{%       endfor %}
  }
{%     endif %}
{{ m_stuff(thing) -}}
{%   endif %}
{%   if thing.type == 'polygon' %}
  {{ thing.points | length }}{% for P in thing.points %}, {{ P }}{% endfor %}
{{ m_stuff(thing) -}}
{%   endif %}
}
{% endmacro -%}

{% macro m_declares() %}
{%   if declares is defined %}
{%     for D in declares %}
{%       if D.content.type == 'vector' %}
#declare {{ D.name }} = {{ D.content.vector }};
{%       elif D.content.type == 'value' %}
#declare {{ D.name }} = {{ D.content.value }};
{%       else %}
#declare {{ D.name }} = {{ m_thing(D.content) }}
{%       endif %}
{%     endfor %}
{%   endif %}
{% endmacro -%}

{% macro m_scene() %}
{%   for O in scene %}
{%     if O.type == 'loop' %}
#{{ O.variant }} ({{ O.condition }})
{%       for O2 in O.content %}
{{ m_thing(O2) }}
{%       endfor %}
#declare {{ O.step }};
#end
{%     else %}
{{ m_thing(O) }}
{%     endif %}
{%   endfor %}
{% endmacro -%}

{{- m_includes() }}
{{ m_camera() }}
{{ m_globals() }}
{{ m_light() }}
{{ m_background() }}
{{ m_declares() }}
{{ m_scene() -}}
